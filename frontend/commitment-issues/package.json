{
  "name": "commitment-issues",
  "publisher": "foi",
  "displayName": "Commitment Issues",
  "description": "Analyze commit messages in a repository and receive feedback.",
  "version": "0.0.1",
  "icon": "./src/images/icon-cropped.png",
  "engines": {
    "vscode": "^1.102.0",
    "node": ">=14.0.0",
    "npm": ">=6.0.0"
  },
  "categories": [
    "Education",
    "AI",
    "Other"
  ],
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "commitment-issues.openConfig",
        "title": "Open Commitment Issues Config",
        "category": "Commitment Issues",
        "icon": "./src/images/icon.png"
      },
      {
        "command": "commitment-issues.showWelcome",
        "title": "Show Welcome",
        "category": "Commitment Issues",
        "icon": "./src/images/icon-cropped.png"
      },
      {
        "command": "commitment-issues.analyzeCommits",
        "title": "Analyze Commits",
        "category": "Commitment Issues",
        "icon": "./src/images/icon-cropped.png"
      },
      {
        "command": "commitment-issues.analyzeCommitsJson",
        "title": "Analyze Commits (JSON)",
        "category": "Commitment Issues",
        "icon": "./src/images/icon-cropped.png"
      }
    ],
    "viewsWelcome": [
      {
        "view": "workbench.explorer.emptyView",
        "contents": "You can analyze your commit messages via the Commitment Issues extension using Google's Gemini, but you need to configure the extension first.\n[Configure extension](command:commitment-issues.openConfig)",
        "when": "workbenchState == empty || config.CommitmentIssues.githubAccessToken == '' || config.CommitmentIssues.githubAccessToken =~ /<.*>/ || config.CommitmentIssues.geminiApiKey == '' || config.CommitmentIssues.geminiApiKey =~ /<.*>/ || config.CommitmentIssues.repositoryUrl == '' || config.CommitmentIssues.repositoryUrl =~ /<.*>/"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "ci-extension-config",
          "title": "Commitment Issues",
          "icon": "./src/images/icon.png"
        },
        {
          "id": "ci-analyze",
          "title": "Analyze Commits",
          "icon": "./src/images/icon-cropped.png"
        }
      ]
    },
    "views": {
      "ci-extension-config": [
        {
          "id": "ci-config",
          "name": "Config",
          "contextualTitle": "Config",
          "icon": "./src/images/icon.png"
        },
        {
          "id": "ci-settings",
          "name": "Settings",
          "contextualTitle": "Settings",
          "icon": "./src/images/icon.png"
        }
      ],
      "ci-analyze": [
        {
          "id": "ci-analyze-view",
          "name": "Analyze Commits",
          "contextualTitle": "Analyze Commits",
          "icon": "./src/images/icon-cropped.png"
        }
      ]
    },
    "configuration": {
      "title": "Commitment Issues",
      "type": "object",
      "properties": {
        "CommitmentIssues.githubAccessToken": {
          "type": "string",
          "default": "<set GitHub fine-grained access token here>",
          "markdownDescription": "GitHub fine-grained access token for accessing repositories.\n\nGo to [GitHub Developer Settings > Personal access tokens > Fine-grained access tokens](https://github.com/settings/personal-access-tokens) > Create a [new fine-grained access token](https://github.com/settings/personal-access-tokens/new) and leave the default scopes.\n\nCopy the token and paste it here. None of your data is collected or sent to any third party, this extension only uses the token to access the repository and analyze commit messages with Gemini. \n\n*If you disagree with GitHub's or Google's terms of service for Gemini or its API, please refrain from using this extension.*",
          "order": 0
        },
        "CommitmentIssues.geminiApiKey": {
          "type": "string",
          "default": "<set Gemini API key here>",
          "markdownDescription": "Gemini API key for accessing the Gemini API.\n\nGo to [Google's AI studio](https://aistudio.google.com/app/apikey), create a new free API key.\n\nCopy the key and paste it here. None of your data is collected by this extension for any purposes other than making use of Gemini to analyze commit messages. \n\n*If you disagree with Google's terms of service for Gemini or its API, please refrain from using this extension.*",
          "order": 1
        },
        "CommitmentIssues.repositoryUrl": {
          "type": "string",
          "default": "<set repository URL here>",
          "markdownDescription": "The URL of the repository to analyze via Gemini. \n\nThis should be the full URL of a repository the token can access or any public repository, e.g., [`https://github.com/jfletcher20/commitment-issues`](https://github.com/jfletcher20/commitment-issues).",
          "order": 2
        },
        "CommitmentIssues.branchToAnalyze": {
          "type": "string",
          "default": "",
          "markdownDescription": "The specific branch to analyze, e.g. `main`. \n\nThis should be the name of a branch in the repository. If left empty, the default branch will be used.",
          "order": 3
        },
        "CommitmentIssues.userToAnalyze": {
          "type": "string",
          "default": "",
          "markdownDescription": "The user whose commits to analyze, e.g. `nmidzic20`. \n\nIf left empty, all commit messages will be analyzed regardless of who committed them.",
          "order": 4
        },
        "CommitmentIssues.amountOfCommitsToAnalyze": {
          "type": "integer",
          "default": 24,
          "maximum": 24,
          "minimum": 1,
          "markdownDescription": "The number of commits to analyze, e.g. `24`. It is recommended to analyze more commits at once.",
          "order": 5
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/express": "^5.0.3",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.102.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.25.1",
    "ts-loader": "^9.5.2",
    "typescript": "^5.8.3",
    "webpack": "^5.99.7",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "@google/genai": "^1.12.0",
    "axios": "^1.11.0",
    "express": "^5.1.0"
  }
}
